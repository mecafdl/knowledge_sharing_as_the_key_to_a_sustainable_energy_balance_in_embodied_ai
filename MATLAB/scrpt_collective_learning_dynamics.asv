%% ************************************************************************
% Dynamics of incremental learning 
% *************************************************************************
clc
close all
clear A

% This variable determines when knowlege collection is completed
threshold = 0.01;

% Number of skills
N         = 5;

% Skill index
s         = [1:N]';

% Skill vector
Nj        = 0:N;

% Rate at which knowledge is depleted per skill acquired
% *NOTE: determined to satisfy <threshold = exp(-alpha*N)>
alpha     = -log(threshold)/N;  % log(0.01)/N;%(rate/N);

% Initial values of the subsequent skills based on alpha
bsigma_0  = exp(-alpha*Nj);

% Some solutions may need a smaller time step for the ODE solver
% n  = 0:0.01:c0*N;
n  = 0:0.01:1000; 

% Initial complexity
c0        = 100;

% Initial knowledge aquisition rate per episode
% *NOTE: determined to satisfy <threshold = exp(-(rate/c0)*c0)>
tau       = -log(threshold)*ones(N,1);
A_i       = -diag(tau/c0);

% G   = Spp.rand();
% A = G*A_i
% eig(A)
%%
clc
syms a p1 p2 p3 p4 p5 p6 real
A = a*eye(3);
% L = [p1 p2;0 p3]
L = [p1 p2 p3;0 p4 p5;0 0 p6]
G = (L')*L
A_bar = G*A;
A = double(subs(A_bar,[a, p1 p2 p3 p4 p5, p6], [-alpha,rand(6,1)']))
disp('Eigenvalues:')
disp([abs(eig(A)),abs(eig(A_i(1:3,1:3))),abs(eig(A))-abs(eig(A_i(1:3,1:3)))]) 
%%
clc
option = 4; % best case 4
switch option
    case 1
        Spp       = sympositivedefinitefactory(N);
        Atmp      = Spp.rand();
        Atmp      = Atmp + abs(min(Atmp,[],'all'));
        Atmp      = Atmp./sum(Atmp(:))
        Aoff      = Atmp - diag(Atmp).*eye(N) + eye(N)
        A         = diag(A).*Aoff
        eig(A)

    case 2 % Metzler matrix with off diagonal entries proportional to diagonal
        A = eye(N);
        while(~all(eig(A)<0))
            A = rand(N,N); % generate a random n x n matrix
            A = 0.5*(A+A');
            A = A + abs(min(A,[],'all')) + 0.001;
            A = 0.8*(A./max(A,[],'all'));
            A = -diag(A_i).*(A - diag(A).*eye(N)) + A_i
        end
        eig(A)

    case 3 % off diagonal entries (+/-) proportional to diagonal
        A = eye(N);
        while(~all(eig(A)<0))
            a =-1;
            b = 1;
            A = (b-a).*rand(N,N) + a;
            A = 0.5*(A+A');
%             A = 0.99*rand(N).*(A./max(A,[],'all'));
            A = 0.99.*(A./max(A,[],'all'));
            A = 0.5*(A+A');
            A = diag(A_i).*(A - diag(A).*eye(N)) + A_i
        end
        eig(A)

    case 4 % just SPD disregard of initial rate
%         A = eye(N);
%         while(~all(eig(A)<0))
%             Spp = sympositivedefinitefactory(N);
%             W   = Spp.rand();
%             W   = W + abs(min(W,[],'all'));
%             W   = W.*(~eye(N)) + eye(N);
%             W   = W./sum(W,2);
%             D   = -diag(rand(N,1));%5*eye(N);
%             D   = A_i.*(1.1 + rand(N,1));
% %             D   = A_i.*(1.5);
%             A = W*D*(W^-1);
%             A = 0.5*(A+A');
% %             A = ((A - diag(A).*eye(N)) + A_i)
%         end
        A = -eye(N);
        while(all(eig(A)<0))
            Spp = sympositivedefinitefactory(N);
            W   = Spp.rand();
            W   = W + abs(min(W,[],'all'));
%             W   = W.*(~eye(N)) + eye(N);
%             W   = W./sum(W,2);
%             D = diag(max(0,rand(N,1) +1));
%             D   = -25*(1 + rand(N,1)).*A_i;
            D   = 2*eye(N);
            A = W*D*(W^-1);
            A_1 = 0.5*(A+A')
%             A = ((A - diag(A).*eye(N)) + A_i)
        end


        G = A_1;
        A = G*A_i
        disp('Eigenvalues:')
        disp([abs(eig(A)), abs(eig(A_i)),abs(eig(A)) - abs(eig(A_i))])

%         Spp   = sympositivedefinitefactory(N);
%         W     = Spp.rand();
%         D = A_i;
%         A = W*D*(W^-1)
%         A = 0.5*(A+A')
%         eig(A)

    case 5 % anything in the off diagonal entries
        A = eye(N);
        while(~all(eig(A)<0))        
            Spp   = sympositivedefinitefactory(N);
            A     = Spp.rand();
            A     = (A - diag(A).*eye(N)) + A_i;
            disp(A)
        end
        eig(A)

    case 6 % Metzler matrix with diagonal equal to incremental
        A = eye(N);
        while(~all(eig(A)<0))        
            Spp   = sympositivedefinitefactory(N);
            A     = Spp.rand();
            A     = abs(A - diag(A).*eye(N)) + A_i;
%             A     = abs(A - diag(A).*eye(N)) - diag(mean(abs(A),2));
            disp(A)
        end        
        eig(A)
end
% %%
%   
%         A = eye(N);
%         while(~all(eig(A)<0))
%             a =-1;
%             b = 1;
%             A = (b-a).*rand(N,N) + a;
%             A = 0.5*(A+A');
%             A = (A - diag(A).*eye(N)) - A_i
%         end
% %         disp(A)
%         eig(A)
% -------------------------------------------------------------------------

% G1   = Spp.rand();
% A = G*A_i;
% disp('A:');
% disp(A)
% disp('|Eigenvalues|:')
% disp([abs(eig(A)),abs(eig(A_i)),abs(eig(A))-abs(eig(A_i))]) 
%%
p          = 1:15;%&10*rand(N*(N+1)/2,1);
p          = normrnd(1*ones(N*(N+1)/2,1),0.33*ones(N*(N+1)/2,1));
p(N+1:end) =  rand(N*(N+1)/2 - N,1);
ind    = find(triu(ones(N,N),1));
L      = zeros(N) + diag(p(1:N));
L(ind) = p(6:end)
G      = L + triu(L,1)'
eig(G)
% G = (L')*L

A = G*A_i;
disp('A:');
disp(A)
disp('Eigenvalues:')
disp([abs(eig(A)),abs(eig(A_i)),abs(eig(A))-abs(eig(A_i))]) 

% L = triu(rand(N,N),1)+1.1*eye(N);
% G = (L')*L;
% A = G1*A_i;
% disp('A:');
% disp(A)
% disp('Eigenvalues:')
% disp([abs(eig(A)),abs(eig(A_i)),abs(eig(A))-abs(eig(A_i))]) 

disp('Det:')
disp(det(A))
close all
type = 'collective';
% (t, x, A, alpha, s, c0, rate, threshold, type)
x = ode4(@(t,x) ...
      fcn_general_dynamics(t, x, A, alpha, s, c0, tau, threshold, type), ...
                                     n, ...
                                     ones(N,1));
x = x';
figure('Color','w')
p = plot(n,x,'LineWidth',2);
hold on
plot(n,exp(A_i(1,1)*n),'k--')
p = area(n,  threshold*ones(numel(n),1),'FaceAlpha',0.25,'EdgeColor','w');
plot(n,threshold*ones(numel(n),1),'k--')
title('Collective')
xlabel('Episodes [n]','FontSize',25)
ylabel('Knowledge ','FontSize',25)
xlim([0 110])
ylim([-0.1 1.1])
%%
 
close all
s         = [1:N]';

Nj        = 0:N;
alpha     = -log(threshold)/N;%-log(0.01)/N;%(rate/N);
% alpha     = (rate/N);
bsigma_0  = exp(-alpha*Nj);

% Some solutions may need a smaller time step for the ODE solver
% n  = 0:0.01:c0*N;
n  = 0:0.01:1000; 
type = 'incremental_3';
x = ode4(@(t,x) fcn_general_dynamics(t, x, A, alpha, s, c0, tau, threshold,...
                type), ...
                                     n, ...
                                     zeros(N,1) +1*bsigma_0(1:end-1)');
x = x';
figure('Color','w')
if strcmp(type,'incremental_2')
%     p = plot(n,bsigma_0(1:end-1)'-x,'LineWidth',2);
    p = plot(n,x,'LineWidth',2);
else
    p = plot(n, x,'LineWidth',2);
end
hold on

% p = plot(n,(1-bsigma_0(1:end-1))' - x,'LineWidth',2);
% p = plot(n, - x,'LineWidth',2);
% hold on
plot(n(end),bsigma_0(1:end-1),'*')
xlabel('Episodes [n]','FontSize',25)
ylabel('Knowledge ','FontSize',25)
% xlim([0 sum(c0*bsigma_0)])
ylim([0 1])
%
title('Incremental')

% clear indx
% for j = 1:size(x,1)
%     delta  = x(j,:) - bsigma_0(j);
%     indx(j) = find(abs(delta) < threshold,1,'first');
% %     disp(n(indx(j)))
% end
% figure('Color','w')
% plot(1:N,c0*bsigma_0(1:end-1),'--','LineWidth',2)
% hold on
% plot(1:N,[n(indx(1)), diff(n(indx(:)))],'LineWidth',2)
% xlabel('Skills','FontSize',25)
% ylabel('Complexity ','FontSize',25)
% legend('Ideal','Actual','FontSize',10)
% xlim([1 N])


%%

sig_bar = @(Nj,alpha) exp(-alpha*Nj);
episodes = 0:c0;
clear indx
clc
close all
figure('Color','w')
% plot(Nj,sig_bar(Nj,(5/N)),'LineWidth',3)
% hold on
semilogy(episodes,0.01*ones(size(episodes)),'k:','LineWidth',3) % Threshold for skill completion
hold on
% The next two plots should be identical
% plot(Nj,0.3*sig_bar(Nj,(5/N)))
% stairs(Nj,sig_bar(Nj -log(0.3)/(5/N),(5/N)))
bsig = [];
for i=1:N
    bsig(i,:) = bsigma_0(i)*sig_bar(episodes,(tau/c0));
    indx(i) = find(bsig(i,:)<0.01,1,'first');
    disp(episodes(indx(i)))
    p = plot(episodes,bsigma_0(i)*sig_bar(episodes,(tau/c0)));
    semilogy(episodes(indx(i))*ones(numel(0:0.00001:1),1),0:0.00001:1,'--','Color',p.Color);
end

% Effects of changing the rate
% stairs(Nj,sig_bar(Nj,1.2*alpha))
xlabel('Episodes [n]','FontSize',25)

%%

sig_bar = @(Nj,alpha) exp(-alpha*Nj);
close all
semilogy(Nj,sig_bar(Nj,(5/N)))
hold on
plot(Nj,0.01*ones(size(Nj)),'k--')
semilogy(Nj,0.3*sig_bar(Nj,(5/N)))
semilogy(Nj,sig_bar(Nj -log(0.3)/(5/N),(5/N)))
semilogy(Nj,sig_bar(Nj,0.3))
%%
clc
close all

x = ode4(@(t,x) -A(1,1)*x,n,1);
figure
stairs(n,x)
xlabel('Episodes [n]','FontSize',25)

%% ************************************************************************

clearvars
close all
clc
clc
c0      = 100;
alpha_i = 10;
N_S     = 6;
N_K     = 2;
N       = N_S/N_K;
Spp     = sympositivedefinitefactory(N);

A     = Spp.rand();


% A     = A + abs(min(A,[],'all'));
% A     = A./(sum(A,'all'))

% Alternative construction for A
A = rand(N); % generate a random n x n matrix
A = 0.5*(A+A');
A = A.*(~eye(N)) + N*eye(N);


A
[V,D] = eig(-A)
c     = (V\ones(N,1));
%
close all
n = 0:0.001:c0;
% n=0;
f =  @(n) V*(exp(diag(D)*n).*c);% (V.*transpose(exp(diag(D)*n)))*c;
% f = @(n) c(1)*V(:,1)*exp(D(1,1).*n) + ...
%     c(2)*V(:,2)*exp(D(2,2).*n) + ...
%     c(3)*V(:,3)*exp(D(3,3).*n);
x = f(n);

f_i = @(t,x) -A.*eye(N)*x; 
f_c = @(t,x) -A*x; 
% x = ode4(f,n,sum(A,2));
x_i = ode4(f_i,n,ones(N,1));
x_c  = ode4(f_c,n,ones(N,1));


min(x_c(:))
figure('Color',[1 1 1])
plot(n,x_i,'k','LineWidth',1.5)
hold on
% plot(n,mean(x,2),'k--')
plot(n,x_c)
xlabel('Episodes n','FontSize',25)
ylabel('$\bar{\sigma}^{(C)}_\mathcal{S}$','Interpreter','latex','FontSize',25)
xlim([0 5])
%%
close all
 plot(n,exp(-3*n) + exp(-8*n))
 plot(n,0.7*exp(-3*n))
 hold on
 plot(n,0.3*exp(-8*n))
 plot(n,0.7*exp(-3*n) + 0.3*exp(-8*n),'k--')
 xlim([0 10])
%% ************************************************************************
% SIMULATION OF THE COMPLETE SYSTEM
% *************************************************************************

clearvars
close all
clc
clc
c0      = 100;
alpha_i = 10;
N_S     = 4;
N_K     = 2;
N       = N_S/N_K;

Spp   = sympositivedefinitefactory(N);
A1     = Spp.rand();
A1     = A1 + abs(min(A1,[],'all'));

Spp   = sympositivedefinitefactory(N);
A2     = Spp.rand();
A2     = A2 + abs(min(A2,[],'all'));

B = 0.1/3*ones(N);

A = [A1, B; B, A2]

[V,D] = eig(-A/c0)
% c     = (V\ones(N,1));
%
close all
n = 0:0.001:c0;
% n=0;
% f =  @(n) V*(exp(diag(D)*n).*c);% (V.*transpose(exp(diag(D)*n)))*c;
% f = @(n) c(1)*V(:,1)*exp(D(1,1).*n) + ...
%     c(2)*V(:,2)*exp(D(2,2).*n) + ...
%     c(3)*V(:,3)*exp(D(3,3).*n);
% x = f(n);

f = @(t,x) -A*x; 
% f = @(t,x) -eye(size(A))*x; 
% x = ode4(f,n,sum(A,2));
x = ode4(f,n,ones(size(A,1),1));

min(x(:))
figure('Color',[1 1 1])
plot(n,x(:,1:2),'b--')
hold on
plot(n,x(:,3:4),'r')
% plot(n,sum(x,2),'k:')
xlabel('Episodes n','FontSize',25)
xlim([0 5])
ylabel('$\bar{\sigma}^{(C)}_{j,k}$','Interpreter','latex','FontSize',25)

h = zeros(N_K, 1);
h(1) = plot(NaN,NaN,'--b');
h(2) = plot(NaN,NaN,'-r');
leg = legend(h, 'k_1','k_1');
set(leg,'FontSize',15)

%% ************************************************************************
% SIMULATION WITH PRE DEFINED EIGENVECTORS
% *************************************************************************

clc
clearvars

% V = [0.2 0.1; 0.6 0.1];
% W = [0.2 0.1;0.1 0.6];
N = 3;
Spp   = sympositivedefinitefactory(N);
W     = Spp.rand();
W     = W + abs(min(W,[],'all'));
W     = W.*(~eye(N)) + eye(N);
W     = W./sum(W,2)

% W = [0.7 0.3;0.3 0.7];
% D = diag([5 5]);
D = diag(rand(N,1));%5*eye(N);
A = W*D*(W^-1)
[V_A,D_A] = eig(A)
c  = (W\sum(W,2));
%
close all
n = 0:0.01:50;
% n=0;
% f =  @(n) V*(exp(diag(D)*n).*c);% (V.*transpose(exp(diag(D)*n)))*c;
% f = @(n) c(1)*V(:,1)*exp(D(1,1).*n) + ...
%     c(2)*V(:,2)*exp(D(2,2).*n) + ...
%     c(3)*V(:,3)*exp(D(3,3).*n);
% x = f(n);

f = @(t,x) -A*x; 
x = ode4(f,n,sum(W,2));



min(x(:))
plot(n,x)
hold on
plot(n,mean(x,2),'k--')

%% ************************************************************************
% SIMULATION OF THE DIFFUSION PROCESS ON A GRAPH
% *************************************************************************
clearvars
clc
close all

N          = 3;
Spp        = sympositivedefinitefactory(N);
A          = Spp.rand();
A          = A + abs(min(A,[],'all'));
A          = A.*(~eye(size(A)))
D          = diag(sum(A,2))
L          = D - A
[U,lambda] = eig(L)

close all
n = 0:0.001:100;
f = @(t,x) -L*x; 
% x = ode4(f,n,sum(A,2));
% x = ode4(f,n,ones(N,1));
x0 = rand(N,1);
x0 = N*(x0/sum(x0));
x = ode4(f,n,x0);
plot(n,x)
xlabel('Episodes [n]','FontSize',25)
% xlim([0 10])
ylabel('$\bar{\sigma}^{(C)}_\mathcal{S}$','Interpreter','latex','FontSize',25)
